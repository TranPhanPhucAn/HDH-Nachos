// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------

//Change program counter of system after 4 byte to continue load next calls.
void IncreasePC(){
    int counter = machine->ReadRegister(PCReg);
    machine->WriteRegister(PrevPCReg, counter);
    counter = machine->ReadRegister(NextPCReg);
    machine->WriteRegister(PCReg,counter);
    machine->WriteRegister(NextPCReg,counter + 4);
}

// Input: - User space address (int) 
// - Limit of buffer (int) 
// Output:- Buffer (char*) 
// Purpose: Copy buffer from User memory space to System memory space 
char* User2System(int virtAddr,int limit) 
{ 
    int i;// index 
    int oneChar; 
    char* kernelBuf = NULL; 
    kernelBuf = new char[limit +1];//need for terminal string 
    if (kernelBuf == NULL) 
        return kernelBuf; 
    memset(kernelBuf,0,limit+1); 
    //printf("\n Filename u2s:"); 
    for (i = 0 ; i < limit ;i++) 
    { 
        machine->ReadMem(virtAddr+i,1,&oneChar); 
        kernelBuf[i] = (char)oneChar; 
        //printf("%c",kernelBuf[i]); 
        if (oneChar == 0) 
            break; 
    } 
    return kernelBuf; 
}

// Input: - User space address (int) 
// - Limit of buffer (int) 
// - Buffer (char[]) 
// Output:- Number of bytes copied (int) 
// Purpose: Copy buffer from System memory space to User memory space 
int System2User(int virtAddr,int len,char* buffer) 
{ 
    if (len < 0) return -1; 
    if (len == 0)return len; 
    int i = 0; 
    int oneChar = 0 ; 
    do{ 
        oneChar= (int) buffer[i]; 
        machine->WriteMem(virtAddr+i,1,oneChar); 
        i ++; 
    }while(i < len && oneChar != 0); 
        return i; 
}


void ExceptionHandlerReadInt() {
	int maxLenBuffer = 11;
	char* buffer = new char[maxLenBuffer + 1];
	int res = 0;
	// Read input buffer and return number of byte read
	int len = gSynchConsole->Read(buffer, maxLenBuffer);
    int i = (buffer[0] == '-') ? 1 : 0;
	for (i; i < len; i++){
		if (buffer[i] >= '0' && buffer[i] <= '9'){
			res = res * 10 + (buffer[i] - '0');
		}
		else{
			DEBUG('a', "\nInvalid input.");
			// Return 0 if invalid input
			machine->WriteRegister(2, 0);
			printf("\n Invalid input.");
			delete buffer;
			return;
		}
	} 
	res = (buffer[0] == '-') ? (-1 * res) : res;
	machine->WriteRegister(2, res);
	delete buffer;
	return;

}

void ExceptionHandlerPrintInt() {
	int number = machine->ReadRegister(4);
	int maxLen = 11;	
	char* buffer = new char[maxLen + 1];
	char* temp_buffer = new char[maxLen + 1];
	int len = 0;
	int i = 0;
	if (number < 0){
		number *= -1;
		buffer[i++] = '-';
        len = 1;
	}
	do {
        	temp_buffer[len++] = number % 10;
        	number /= 10;
    	} while (number);
   	for(int j = len - 1; j >= 0; j--) 
        	buffer[i++] = '0' + (char)temp_buffer[j];
    	gSynchConsole->Write(buffer, len);
	delete buffer, temp_buffer;
}


void ExceptionHandlerReadChar() {
    char c = 0;
    gSynchConsole->Read(&c,1);
    machine->WriteRegister(2, (int)c);
}
void ExceptionHandlerPrintChar() {
    char c = (char)machine->ReadRegister(4);
    gSynchConsole->Write(&c,1);
    machine->WriteRegister(2, 0);
}

void ExceptionHandlerReadString(){
    int buffeAddress = machine->ReadRegister(4);
    int maxLength = machine->ReadRegister(5);

    char *buffer = new char[maxLength + 1];
    int len = gSynchConsole->Read(buffer, maxLength);

    buffer[len] = '\0';

    System2User(buffeAddress, len +1 , buffer);
    delete buffer;  
}

void ExceptionHandlerPrintString(){
    int bufferAddress = machine->ReadRegister(4);
    char* buffer = User2System(bufferAddress, MAX_STRING_SIZE);

    int len = strlen(buffer);

    for(int i =0;i<len;i++){
        gSynchConsole->Write(&buffer[i], 1);
    }

    char nullChar = '\0';
    gSynchConsole->Write(&nullChar, 1);

    delete buffer;
}

void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);

    switch(which){
        case NoException: 
            return; 
        
        case PageFaultException:
            DEBUG('a', "\nPage Fault Exception."); 
            printf ("\n\nPage Fault Exception."); 
            interrupt->Halt(); 
            break; 
        case ReadOnlyException:
            DEBUG('a', "\nRead Only Exception."); 
            printf ("\n\nRead Only Exception."); 
            interrupt->Halt(); 
            break; 
        case BusErrorException:
            DEBUG('a', "\nBus Error Exception."); 
            printf ("\n\nBus Error Exception."); 
            interrupt->Halt(); 
            break;
        case AddressErrorException:
            DEBUG('a', "\nAddress Error Exception."); 
            printf ("\n\nAddress Error Exception."); 
            interrupt->Halt(); 
            break;
        case OverflowException:
            DEBUG('a', "\nOverflow Exception."); 
            printf ("\n\nOverflow Exception."); 
            interrupt->Halt(); 
            break;
        case IllegalInstrException:
            DEBUG('a', "\nIllegal Instruction Exception."); 
            printf ("\n\nIllegal Instruction Exception."); 
            interrupt->Halt(); 
            break;
        case NumExceptionTypes:
            DEBUG('a', "\nNum Exception Types."); 
            printf ("\n\nNum Exception Types."); 
            interrupt->Halt(); 
            break;
        case SyscallException: 
            switch (type){ 
                case SC_Halt: 
                    DEBUG('a', "\nShutdown, initiated by user program."); 
                    printf ("\n\nShutdown, initiated by user program."); 
                    interrupt->Halt(); 
                    break;
                case SC_ReadChar:
                    ExceptionHandlerReadChar();
                    IncreasePC();
                    break;
                case SC_PrintChar:
                    ExceptionHandlerPrintChar();
                    IncreasePC();
                    break;
		case SC_ReadInt:
		    ExceptionHandlerReadInt();
		    IncreasePC();
		    break;
		case SC_PrintInt:
		    ExceptionHandlerPrintInt();
		    IncreasePC();
		    break;
		case SC_ReadString:
                    ExceptionHandlerReadString();
                    IncreasePC();
               	    break;
           	 case SC_PrintString:
                    ExceptionHandlerPrintString();
            	    IncreasePC();
                    sbreak;
		}
		break;      
            
          
            default: 
                printf("\n Unexpected user mode exception (%d %d)", which, 
                type); 
                interrupt->Halt();
    }

}
